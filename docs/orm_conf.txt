文件位置 conf/orm.conf

[default]
type=main
host=127.0.0.1
port=3306
dbname=hello_world
user=benchmarkdbuser
password=benchmarkdbpass
pretable=
maxpool=5
dbtype=mysql
#ssl=ON

type=second
host=127.0.0.1
port=3306
dbname=hello_world
user=benchmarkdbuser
password=benchmarkdbpass
pretable=
maxpool=20
dbtype=mysql
#ssl=ON

ORM 配置
type 为类型 就是主从分离，以后可以开发缓存同步，目前先主从。host 127.0.0.1 填本地的地址，MySQL必须大于等于8版本，因为MySQL9不支持旧的认证了，
pretable 是表前缀，有时候只有一个数据库权限可以一个数据库放多个业务。
dbtype 目前支持MySQL。
ssl 可以打开，特别是远程连接时候，启用加密连接。本地的不会启用ssl连接。

ORM 使用入门

框架目前支持数据库到文件方式，这样修改数据库可以重新生成ORM文件。
编译成功后

# ./bin/paozhu_cli 

paozhu_cli(1495,0x7ff85ac38fc0) malloc: nano zone abandoned due to inability to reserve vm space.
  model ｜ view | viewtocpp | control   
 Welcome to use cli to manage your MVC files。
(m)model (v)view (f)viewtocpp or (c)control , (j)son ,x or q to exit[input m|v|f|c|j|]:

输入 m 选择生成ORM模型文件

paozhu_cli(1495,0x7ff85ac38fc0) malloc: nano zone abandoned due to inability to reserve vm space.
  model ｜ view | viewtocpp | control   
 Welcome to use cli to manage your MVC files。
(m)model (v)view (f)viewtocpp or (c)control , (j)son ,x or q to exit[input m|v|f|c|j|]:m   
 🍄 current path: /Users/hzq/paozhu
 1 hello_world
 3 paozhu_docs
 5 cppcms
select db index:

输入 1 选择 hello_world 数据库生成文件。

paozhu_cli(1495,0x7ff85ac38fc0) malloc: nano zone abandoned due to inability to reserve vm space.
  model ｜ view | viewtocpp | control   
 Welcome to use cli to manage your MVC files。
(m)model (v)view (f)viewtocpp or (c)control , (j)son ,x or q to exit[input m|v|f|c|j|]:m
 🍄 current path: /Users/hzq/paozhu
 1 hello_world
 3 paozhu_docs
 5 cppcms
select db index:1
show tables;
create fortune table to models 🚗
 create table metainfo file: /Users/hzq/paozhu/orm/include/fortunebase.h
create world table to models 🚗
 create table metainfo file: /Users/hzq/paozhu/orm/include/worldbase.h
(m)model (v)view (f)viewtocpp or (c)control , (j)son ,x or q to exit[input m|v|f|c|j|]:x

输入 x 退出

可以看到 /Users/hzq/paozhu/orm 目录下生成文件
orm
├── include
│   ├── fortune_mysql.h
│   ├── fortunebase.h
│   ├── world_mysql.h
│   └── worldbase.h
├── orm.h
│
models
├── Fortune.cpp
├── World.cpp
└── include
    ├── Fortune.h
    └── World.h

ORM目录是实体文件，两个文件一个是mysql连接层mysql结尾，一个是数据表实体映射base.h结尾。
我们其实是操作models目录下ORM文件，这两个文件一个cpp一个h文件，自动生成，
但是只生成一次，有了不会覆盖，因为真正业务系统可以自己加业务代码在里面。

比如
auto myworld = orm::World();
就是 models 目录下 World.h
这个是默认数据库，比如自带cms演示
auto users = orm::cms::Sysuser();

orm是命名空间，主要是给ORM用
cms是orm.conf数据库配置标签，也是生成的cms命名空间，方便隔离和转换数据库，如果是[default]可以省略defaut.
为什么这样设计呢，
一个是一个数据库可以有多个连接，这样我们不知道使用那个连接。
一个是数据库名字很长，像云主机可能自动生成一个几十个字符长的数据库名，甚至有下划线的。
一个是可以个性标签，这样数据库是什么名不重要了。
一个是我们用来做命名空间隔离表对象，这样很多数据库生成的C++类不会冲突。

所以orm::cms::Sysuser();使用cms隔离了sysuser表实体C++类，不会与其它数据库同名表有冲突。
比如orm::erp::Sysuser();erp是erp数据库标签，他的数据库是什么名不重要，
就是同样有sysuser表也没有关系。

之所以这样设计，就是一个业务系统，一个单体服务器程序，可以有很多数据库，而且他们表名可以有重名。
以后可以有不同数据库，比如MySQL PG等，他们可以分布在其它机器上。
他们可以混合集群，一个单体服务器程序也可以集群，因为内置了读写分离，所以框架可以适合大业务系统。

